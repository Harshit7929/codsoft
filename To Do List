#include <iostream>
#include <vector>
#include <string>

// Task structure to store task details
struct Task 
{
    std::string description;
    bool completed;
    Task(const std::string& desc) : description(desc), completed(false) {}
};

// To-Do List Manager class
class ToDoListManager
{
private:
    std::vector<Task> tasks;

public:
    // Function to add a task to the list
    void addTask(const std::string& description) 
    {
        tasks.push_back(Task(description));
        std::cout << "Task added successfully.\n";
    }

    // Function to view tasks in the list
    void viewTasks()
    {
        if (tasks.empty()) 
        {
            std::cout << "No tasks in the list.\n";
        } else {
            std::cout << "Tasks:\n";
            for (size_t i = 0; i < tasks.size(); ++i) {
                std::cout << "[" << (tasks[i].completed ? "X" : " ") << "] " << i + 1 << ". " << tasks[i].description << "\n";
            }
        }
    }

    // Function to mark a task as completed
    void markTaskAsCompleted(size_t index)
    {
        if (index >= 1 && index <= tasks.size()) 
        {
            tasks[index - 1].completed = true;
            std::cout << "Task marked as completed.\n";
        } else {
            std::cout << "Invalid task index.\n";
        }
    }

    // Function to remove a task from the list
    void removeTask(size_t index) 
    {
        if (index >= 1 && index <= tasks.size()) 
        {
            tasks.erase(tasks.begin() + index - 1);
            std::cout << "Task removed successfully.\n";
        } else {
            std::cout << "Invalid task index.\n";
        }
    }
};

int main() 
{
    ToDoListManager toDoList;
    std::cout << "\n===== To-Do List Manager =====\n";

    while (true) {
        std::cout <<"\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. View Tasks\n";
        std::cout << "3. Mark Task as Completed\n";
        std::cout << "4. Remove Task\n";
        std::cout << "5. Exit\n";
        std::cout << "Enter your choice: ";

        int choice;
        std::cin >> choice;
        switch (choice) {
            case 1: {
                std::string taskDescription;
                std::cout << "Enter task description: ";
                std::cin.ignore();  // Clear newline character from the buffer
                std::getline(std::cin, taskDescription);
                toDoList.addTask(taskDescription);
                break;
            }
            case 2:
                toDoList.viewTasks();
                break;
            case 3: {
                size_t taskIndex;
                std::cout << "Enter task index to mark as completed: ";
                std::cin >> taskIndex;
                toDoList.markTaskAsCompleted(taskIndex);
                break;
            }
            case 4: {
                size_t taskIndex;
                std::cout << "Enter task index to remove: ";
                std::cin >> taskIndex;
                toDoList.removeTask(taskIndex);
                break;
            }
            case 5:
                std::cout << "Exiting program.\n";
                return 0;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }
    }
    return 0;
}
